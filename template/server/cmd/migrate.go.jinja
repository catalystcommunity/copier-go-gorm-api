package cmd

import (
	"embed"
	"{{ full_project_name }}/server/config"
	"github.com/urfave/cli/v2"

	"github.com/catalystsquad/app-utils-go/errorutils"
	"github.com/catalystsquad/app-utils-go/logging"
	"github.com/pressly/goose/v3"
	"gorm.io/driver/postgres"
	"gorm.io/gorm"
)

//go:embed migrations/*.sql
var migrations embed.FS

var MigrateCommand = &cli.Command{
	Name:  "migrate",
	Usage: "Runs database migrations",
	Flags: []cli.Flag{
		&cli.StringFlag{
			Name: "postgres-uri",
			Aliases: []string{"pgdbu"},
			Value: "postgresql://postgres:postgres@localhost:5432?sslmode=disable",
			Usage: "The uri to use to connect to postgres",
			Destination: &config.PostgresUri,
			EnvVars: []string{"POSTGRES_URI"},
		},
	},
	Action: func(ctx *cli.Context) error {
		return RunMigrations()
	},
}

func RunMigrations() error {
	db, err := gorm.Open(postgres.Open(config.PostgresUri), &gorm.Config{})
	errorutils.LogOnErr(nil, "error opening database connection", err)
	if err != nil {
		return err
	}
	sqldb, err := db.DB()
	errorutils.LogOnErr(nil, "error getting database connection", err)
	if err != nil {
		return err
	}
	// set goose file system to use the embedded migrations
	goose.SetBaseFS(migrations)
	logging.Log.Info("Running migrations")
	err = goose.Up(sqldb, "migrations")
	errorutils.LogOnErr(nil, "error running migrations", err)
	if err != nil {
		return err
	}

	return nil
}
